require("dotenv").config();
const cron = require("node-cron");
const twilio = require("twilio");

const client = twilio(process.env.TWILIO_SID, process.env.TWILIO_AUTH_TOKEN);

// üìû –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä–∞
async function makeCall(attempt = 1) {
  console.log(`‚òéÔ∏è –ü–æ–ø—ã—Ç–∫–∞ #${attempt}: –¥–µ–ª–∞–µ–º –∑–≤–æ–Ω–æ–∫...`);

  try {
    const call = await client.calls.create({
      twiml: '<Response><Say>Wake up! This is your wake-up bot calling you.</Say></Response>',
      to: process.env.YOUR_PHONE,
      from: process.env.TWILIO_PHONE,
    });

    console.log(`üìû –í—ã–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${call.sid}`);

    // –ñ–¥—ë–º 30 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –¥–∞—Ç—å –∑–≤–æ–Ω–∫—É –ø—Ä–æ–π—Ç–∏
    await new Promise((res) => setTimeout(res, 30000));

    const result = await client.calls(call.sid).fetch();
    console.log(`üìä –°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞: ${result.status}`);

    if (["no-answer", "busy", "failed"].includes(result.status) && attempt < 2) {
      console.log("üîÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É...");
      setTimeout(() => makeCall(attempt + 1), 60_000);
    } else {
      console.log("‚úÖ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–≤—Ç–æ—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.");
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–≤–æ–Ω–∫–µ:", err);
  }
}

// üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
makeCall();

// ‚è± –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∂–∏–≤
cron.schedule("* * * * *", () => {
  console.log("‚è± –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:", new Date().toLocaleTimeString());
});

// üïû –ë—É–¥–∏–ª—å–Ω–∏–∫: –∑–≤–æ–Ω–æ–∫ –≤ 3:30 AM –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
cron.schedule("30 3 * * *", () => {
  console.log("‚è∞ 3:30 AM! Wake-up –≤—ã–∑–æ–≤ —Å—Ç–∞—Ä—Ç—É–µ—Ç.");
  makeCall();
});
